"""
–†–µ–∂–∏–º —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–æ–∑–Ω–∏—Ü—ã

–û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ç–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏
"""

# -------------------------------- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏
import asyncio
# -------------------------------- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, StateFilter, or_f
from aiogram.client.default import DefaultBotProperties  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π

# -------------------------------- –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from handlers.text_message import * # –°–ø–∏—Å–æ–∫ —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤:
from filters.chats_filters import ChatTypeFilter

# from aiogram.utils.formatting import as_list, as_marked_section, Bold, Italic

from menu import keyboard_menu  # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–Ω–∏–∑—É
from menu import inline_menu  # –ö–Ω–æ–ø–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é - –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π



# –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —á–∞—Ç–∞ –ø–æ–¥ —Ä–æ–∑–Ω–∏—Ü—É:
retail_router = Router()

# –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ:
# retail_router.message.filter(ChatTypeFilter(['retail']))
# retail_router.edited_message.filter(ChatTypeFilter(['retail']))

# ----------------------------------------------------------------------------------------------------------------------

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@retail_router.message(CommandStart())
async def start_cmd(message: types.Message):
    user = message.from_user.first_name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞, –∑–∞—á–µ–º –Ω—É–∂–µ–Ω:
    await message.answer((hello_users_retail.format(user)), parse_mode='HTML')   # .as_html()


    await asyncio.sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

    #
    await message.answer(f'–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–µ—à–∏—Ç—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å! üíÜ‚Äç‚ôÇÔ∏è',
                         reply_markup=keyboard_menu.menu_kb)

    await asyncio.sleep(1)

    # –∑–¥–µ—Å—å –≤—ã–∑–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ: —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É. +
    # –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞:
    await message.answer(f'–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚úçÔ∏è ?',
                         reply_markup=inline_menu.get_callback_btns(btns={
                             '–°–æ–∑–¥–∞—Ç—å': 'new',
                             '–ü–æ–∑–∂–µ': 'none'
                         }))  # create
                        # —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞ –∫–Ω–æ–ø–∫–∏#



# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: (or_f(Command("menu"), (F.text.lower() == "–º–µ–Ω—é")))
@retail_router.callback_query(F.data.startswith('new'))
async def callback_new(callback: types.CallbackQuery): # –¥–ª—è –±–¥ -   , session: AsyncSession
    # product_id = callback.data.split("_")[-1]
    # await orm_delete_product(session, int(product_id))

    #  0. –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è +
    await callback.answer()  # –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–≤–µ—Ç
    await callback.message.answer(category_problem, parse_mode='HTML') #.as_html() - –ø–æ—Ö–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å f —Å—Ç—Ä–æ–∫–æ–π




# @retail_router.message(CommandStart())
# async def start_cmd(message: types.Message):
#     await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")


